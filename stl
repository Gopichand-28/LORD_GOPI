#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
//sequeance containers:implement data structures 
//VECTORS
{
    //an empty vector
    vector<int>arr;
    arr.push_back(1);//{1}
    arr.emplace_back(2);//{1,2}
    cout<<arr[1]<<endl;
    //2D vector
    vector<vector<int>>mat={{1,2,3},{4,5,6},{7,8,9}};
    for(int i=0;i<mat.size();i++)
    {
        for(int j=0;j<mat[i].size();j++)
        {
            cout<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    //vector with pair elemts
    vector<pair<int,int>>ve;
    ve.push_back({4,5});//{{4,5}}
    ve.emplace_back(7,8);//{{4,5},{7,8}}
    //vector of size 5
    //every one as 100
    vector<int>vat(5,100);//{100,100,100,100,100}
    vector<int>vat(5);//{0,0,0,0,0}
    vector<int>vat(5,13);
    //copy one vector into another
    vector<int>vet1(vet);//vet1={13,13,13,13,13}

    return 0;
}
//ITERATOR_VECTOR.CPP
{
    vector<int>vet={10,20,30,40};
    vector<int>::iterator it=vet.begin();//it refers to address of that point
    // so if you want value at that point use *
    cout<<*(it)<<endl;
    //it++;
    it=it+2;
    cout<<*(it);

    vector<int>::iterator it=vet.end();//it point the address of end-1
    vector<int>::iterator it=v.rend();//it point the address of second position that means 20 address
    vector<int>::iterator it.rbegin();//it point the address of last value

    cout<<vet[0]<<" "<<vet.at(0)<<endl;//to access the values in vector
    cout<<vet.back()<<endl;//access the last value

    //ways to print the vector
    for(vector<int>::iterator it=vet.begin();it!=vet.end();it++)
    {
        cout<<*(it)<<" ";
    }
    cout<<endl;
    for(auto it=vet.begin();it!=vet.end();it++)
    {
        cout<<*(it)<<" ";
    }
    cout<<endl;
    for(auto it:vet)
    {
        cout<<it<<" ";
    }
    //erase function
    vet.erase(vet.begin());//it erase the first value
    vet.erase(vet.begin()+1);//it erase second value
    //what if you want erase range of elements
    //{10,20,30,40,50}
    vet.erase(vet.begin()+1,vet.begin()+4);//{10,50}
    //insert function in vector
    vet.insert(vet.begin(),300);//300 will be inserted at the begining
    vet.insert(vet.begin()+1,2,10)//now two 10's will be inserted from second
    vector<int>copy(2,10);//{10,10}
    vet.insert(vet.begin(),copy.begin(),copy.end());
    //to erase the last element
    vet.pop_back();
    //v1={1,2}
    //v2={4,5}
    v1.swap(v2);//v1={4,5} v2={1,2}
    vet.clear();//to erase all the values
    cout<<vet.empty();//gives true if vector is empty



}
//LISTS
{
    list<int>lis;
    //append the element
    lis.push_back(1);//{1}
    lis.emplace_back(2);//{2}
    //what if you want push at front
    lis.push_front(5);//{5,1,2}
    list.emplace_front();
}
//DEQUES
{
    deque<int>de;
    de.push_back(1);
    //cout<<de[0];
    de.emplace_back(2);
    //cout<<de[0]<<" "<<de[1];
    de.push_front(5);
    //cout<<de[0];
    de.emplace_front(10);
    //cout<<de[0];
    de.pop_front();//removes first element
    de.pop_back();//removes the last element
    cout<<de.back()<<endl;
    cout<<de.front();
}
//CONTAINER ADAPTOR-PROVIDE A DIFFERENT INTERFACE FOR SEQUENTAIL CONTAINERS
//QUEUES
{
    queue<int>qu;//FIFO-->first in first out
    qu.push(1);
    qu.push(2);
    qu.emplace(5);
    qu.back()+=5;
    //cout<<qu.back()<<endl;
    qu.pop();
    //cout<<qu.front();
    
//PRIORITY QUEUS
//priority queue
    priority_queue<int>pq;//it stores in decending order
    pq.push(1);//{1}
    pq.push(10);//{10,1}
    pq.push(5);//{10,5,1}
    pq.emplace(8);//{10,8,5,1}
    cout<<pq.top()<<endl;//prints 10
    pq.pop();//10 will be removed
    cout<<pq.top()<<endl;//8 will be printed

    //minimum heap-- to store in accending oredr
    priority_queue<int,vector<int>,greater<int>>pq1;
    pq1.push(10);//{10}
    pq1.push(8);//{8,10}
    cout<<pq1.top();
   
}
//STACK
{
    //last in first out-->LIFO
    stack<int>st;
    st.push(1);
    //cout<<st.top();
    st.push(2);
    st.push(3);
    st.emplace(5);
    cout<<st.top();
    st.pop();//top will be removed
    st.size();//gives size of stack
    cout<<st.empty();//gives true if stack is empty or false
    stack<int>st1,st2;
    st1.swap(s2);//swaps the stacks s1 and s2

}

//SET
set<int>st;
st.insert(1);//{1}
st.insert(2);//{1,2}
st.insert(4);//{1,2,4}
st.emplace(3);//{1,2,3,4}
//begin(),end(),rbegin(),rend(),size(),empty(),and swap() are same
auto it=se.find(3);//to check if element is present
cout<<*(it);
auto it=se.find(6);//if element is not present goes to last+1 address
//how to erase
se.erase(5)//erase 5 {1,2,3,4}
    auto it=se.find(4);
    se.erase(it);//it removes the position and value at that particular address
    auto it1=se.find(2);
    auto it2=se.find(4);
    se.erase(it1,it2);//erase in the given range from first to last-1 --> from it1 to it2-1 it erases 
    //count
    int c=se.count(1);//if it present count is 1 else 0

}
//UNORDERD SET
{
    unordered_set<int>us;//does't store duplicates and they are
    //in unsorted
    //it does not store in any particular order
    //it has a better time complexity
    //but in case of collusions gives wrong answer

}
//MULTISET
{
    multiset<int>ms;//it can store duplicates
    ms.insert(1);
    ms.insert(2);
    ms.insert(1);
    ms.erase(1);//it erases all ones present in set
    ms.erase(ms.find(1));//it erases the fist one in the set
    for(auto it:ms){
        cout<<it<<" ";
    }
    ms.count(1);//give the count of ones in set
    //what if you want erase two ones
    ms.erase(ms.find(1),ms.find(1)+2);
}
//MAP
{
    map<int,int>dic;//key:value pair
    //stores data in sorted , sorted will be on keys
    map<int,pair<int,int>>dic1;//one key may have set of pairs
    map<pair<int,int>,int>dic2;//set of keys may have one value
    dic[1]=2;//dic={{1,2}}
    dic.emplace({3,1});
    dic.insert({2,4});
    {{1,2},
     {2,4},
     {3,1}
    }
    for(auto it:dic)
    {
        cout<<it.first<<" "<<it.second;
    }
    dic2[{2,3}]=10;//set of keys have one value
    cout<<dic[2];//prints 4
    cout<<dic[5];//gives 0 as it is not preasent

    auto it=dic.find(3);//gives the position where 3 is found
    auto it=dic.find(5);//position to the end as 5 is not present
    //lower and upper bound works
    auto it=dic.lower_bound(3);
    auto it=dic.upper_bound(5);
    //erase swap begin end size will works
    //we have multi map which allowes you to store same key and value
    //pair for multiple times
    //unordered_map
}
//PAIR
{
    //pair dicleration
    pair<int,char>p={1,'h'};
    cout<<p.first<<" "<<p.second<<endl;

    //pair in pair
    pair<int, pair<int,int>>p1={1,{2,3}};

    cout<<p1.first<<" "<<p1.second.first<<endl;

    //pair with array
    pair<int,int>arr[]={{1,2},{3,4}};
    cout<<arr[0].first<<endl;
    //make_pair
    pair<char,int>pa=make_pair('A',2);
    cout<<pa.second;
    return 0;
}
{
    pair<int , int>p={1,3};
    std::cout<<p.first<<" "<<p.second;
    return 0;

}



